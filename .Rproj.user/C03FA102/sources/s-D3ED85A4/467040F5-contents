setwd("/Users/DK/Documents/internship 2")# set the working directory in the appropriate location. This is my example.

source("informedTtest_functions.R") # R file with analytical solutions of informed BFs (exact code from Quentin's informed t-test paper)


### look at the data
done <- read.table("effectsize_data/data_onesample.txt", header = TRUE)
dpaired <- read.table("effectsize_data/data_pairedsample.txt", header = TRUE)
dunpaired <- read.table("effectsize_data/data_twosample.txt", header = TRUE)


dall <- data.frame(type = c(rep("one-sample", nrow(done)),
                            rep("paired-samples", nrow(dpaired)),
                            rep("unpaired", nrow(dunpaired))),
                   N1 = c(done$N, dpaired$N1, dunpaired$N1),
                   N2 = c(rep(0, nrow(done) + nrow(dpaired)), dunpaired$N2),
                   t = c(done$tvalue, dpaired$tvalue, dunpaired$tvalue),
                   pValue = c(2*pt(abs(done$tvalue), df = done$N - 1, lower.tail = FALSE),
                              2*pt(abs(dpaired$tvalue), df = dpaired$N1 - 1, lower.tail = FALSE),
                              2*pt(abs(dunpaired$tvalue), df = dunpaired$N1 + dunpaired$N2 - 2,
                                   lower.tail = FALSE)),
                   effectSize = c(done$effectsize, dpaired$effectsize,
                                  dunpaired$effectsize))

dall$t <- abs(dall$t)
dall$effectSize <- abs(dall$effectSize)


#View# analysis
bfplus0 <- bfplus0_inf <- bfplus0_bayesfactor <- bf10_bayesfactor <- numeric(nrow(dall))
rscale_def <- 1/sqrt(2)


#Calculate imformed/default BFs

# elicited t-priors (these you can find in the "best fitted parameters txt")
prior.location<- c(0.1,0.5500025,0.6000279,0.5853842,0.4052126,.31064931)  
prior.scale <-c(0.12,0.08142563,0.1076721,0.1073029,0.1167314,.07525807)
prior.df <- c(3,3,13,3,13,9)

#Calculate imformed/default BFs per participant based on t priors
for(participant in 1:6){
  print(participant)
  for (i in seq_along(bfplus0)) {
    
    print(i)
    
    # BF with Cauchy prior
    bfplus0[i] <- bf10_t(t = dall$t[i], ny = dall$N1[i], nx = dall$N2[i],
                         independentSamples = ifelse(dall$type[i] == "unpaired", TRUE, FALSE),
                         prior.location = 0, prior.scale = rscale_def, prior.df = 1)$BFplus0
    
    # BF with informed prior (for code see Gronau et al. 2017)
    bfplus0_inf[i] <- bf10_t(t = dall$t[i], ny = dall$N1[i], nx = dall$N2[i],
                             independentSamples = ifelse(dall$type[i] == "unpaired", TRUE, FALSE),
                             prior.location = prior.location[participant],
                             prior.scale = prior.scale[participant],
                             prior.df = prior.df[participant])$BFplus0
    
  }
  
  if(participant ==1){
    dall$bfplus0_pp1 <- bfplus0
    dall$bfplus0_inf_pp1 <- bfplus0_inf
  }else if (participant ==2){
    dall$bfplus0_pp2 <- bfplus0
    dall$bfplus0_inf_pp2 <- bfplus0_inf
  }else if (participant ==3){
    dall$bfplus0_pp3 <- bfplus0
    dall$bfplus0_inf_pp3 <- bfplus0_inf
  }else if (participant ==4){
    dall$bfplus0_pp4 <- bfplus0
    dall$bfplus0_inf_pp4 <- bfplus0_inf
  }else if (participant ==5){
    dall$bfplus0_pp5 <- bfplus0
    dall$bfplus0_inf_pp5 <- bfplus0_inf
  }else if (participant ==6){
    dall$bfplus0_pp6 <- bfplus0
    dall$bfplus0_inf_pp6 <- bfplus0_inf
  }
}



##################################

##################################
pdf("t_test-pp1.pdf", 6, 6)# change the name of the file accordingly (cause we have 6 different people)
bfplus0 <-  dall$bfplus0_pp1# change the column appropriately given the participant you want to plot
bfplus0_inf <- dall$bfplus0_inf_pp1# change the column appropriately given the participant you want to plot

bounds1 <- list(c(1, 3), c(3, 10), c(10, 30), c(30, 100), c(100, 1e5), c(1e5, 1e43))
bounds2 <- rev(bounds1)

op <- par(mfrow = c(6, 6), mar = c(0, 0, 0, 0), oma = c(6.5, 8.5, 2, 3))
require("RColorBrewer")
col_list <-  brewer.pal(5, "Set1")
panel <- 1

for (i in seq_along(bounds2)) {
  for (j in seq_along(bounds1)) {
    
    bfplus0_tmp <- bfplus0[bfplus0 > bounds2[[i]][1] & bfplus0 <= bounds2[[i]][2] &
                             bfplus0_inf > bounds1[[j]][1] & bfplus0_inf <= bounds1[[j]][2]]
    bfplus0_inf_tmp <- bfplus0_inf[bfplus0 > bounds2[[i]][1] & bfplus0 <= bounds2[[i]][2] &
                                     bfplus0_inf > bounds1[[j]][1] & bfplus0_inf <= bounds1[[j]][2]]
    
    es_tmp <- dall$effectSize[bfplus0 > bounds2[[i]][1] & bfplus0 <= bounds2[[i]][2] &
                                bfplus0_inf > bounds1[[j]][1] & bfplus0_inf <= bounds1[[j]][2]]
    
    for(k in 1:length(es_tmp)){
      if(length(es_tmp)==0){
        pch = logical(0)
        col = logical(0)
      }else if(es_tmp[k] < 0.50 & es_tmp[k] > 0.20){
        pch[k] <- 15
        col[k] <- col_list[2]
      }else if(es_tmp[k] < 0.80 & es_tmp[k] > 0.50){
        pch[k] <- 16
        col[k] <- col_list[3]
      }else if(es_tmp[k] <1.20 & es_tmp[k] > 0.80){
        pch[k] <- 17
        col[k] <- col_list[4]
      }else if(es_tmp[k] > 1.20){
        pch[k] <- 18
        col[k] <- col_list[5]
      }
    }
    
    if (length(bfplus0_tmp) > 0) {
      
      plot(1, type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "",
           xlim = log(bounds1[[j]]), ylim = log(bounds2[[i]]), xaxs = "i",
           yaxs = "i")
      
      points(log(bfplus0_inf_tmp), log(bfplus0_tmp),
             pch = pch, bg = col, col = col, cex = 1.8, xpd = NA)
      
    } else {
      
      if (panel == 29) {
        plot(1, type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "",
             xlim = log(bounds1[[j]]), ylim = log(bounds2[[i]]), xaxs = "i",
             yaxs = "i", bty = "c")
      } else if (panel == 30) {
        plot(1, type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "",
             xlim = log(bounds1[[j]]), ylim = log(bounds2[[i]]), bty = "]")
      } else {
        plot(1, type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "",
             xlim = log(bounds1[[j]]), ylim = log(bounds2[[i]]), xaxs = "i",
             yaxs = "i")
      }
      
    }
    
    if (panel %in% (6*0:5+1))
      axis(2, at = log(bounds2[[i]]), las = 1, labels = bounds2[[i]], cex.axis = 1.7)
    
    if (panel %in% 31:36)
      axis(1, at = log(bounds1[[j]]), labels = bounds1[[j]], cex.axis = 1.7)
    
    if (i + j == 7)
      abline(0, 1, lwd = 2)
    
    panel <- panel + 1
    
  }
}

mtext(text = expression(BF["F"["+"]][0]), side = 1, outer = TRUE, cex = 1.5, line = 4)
mtext(text = expression(BF["+"][0]), side = 2, outer = TRUE, cex = 1.5,
      las = 1, line = 3.5)

legend(10, 1.65, c("0.2 < d < 0.5", "0.5 < d < 0.8",
                   "0.8 < d < 1.2", "d > 1.2"),
       bty = "n", pch = 15:18, pt.bg = col_list[2:5],
       col = col_list[2:5], pt.cex = rep(1.9, 4), cex = 1.3, xjust = .5, yjust = .5,
       y.intersp = 1.1, xpd = NA, adj = 0)
dev.off()



######################################
#evidence for H0 in t-tests 
######################################

setwd("/Users/DK/Documents/internship 2")# set the working directory in the appropriate location. This is my example.
source("informedTtest_functions.R") # R file with analytical solutions of informed BFs.

pdf("t-tests_BFs_sample.pdf", 6.5,4.5)

par(mfrow = c(2,3), mar = c(5,4,2,1), lwd =2 , cex.lab = 1.3,cex.axis = 1.3)

n <- 5:1000
bf01 <- bf01_inf <- bf01_bayesfactor <- numeric(length(n))
rscale_def <- 1/sqrt(2)
library(BayesFactor)
### informed prior ###
psych_names = c("Social 1", "Social 2", "Neuro 1", "Neuro 2", "Develop 1", "Develop 2")

prior.location<- c(0.1,0.5500025,0.6000279,0.5853842,0.4052126,.31064931)  
prior.scale <-c(0.12,0.08142563,0.1076721,0.1073029,0.1167314,.07525807)
prior.df <- c(3,3,13,3,13,9)
par(mfrow = c(2,3), mar = c(5,4,2,1), lwd =2 , cex.lab = 1.3,cex.axis = 1.3)

for(j in 1:6){
  
  for (i in seq_along(n)) {
    
    print(i)
    
    ### BF ###
    
    # BayesFactor package
    bf01_bayesfactor[i] <- 1/ttest.tstat(t = 0, n1 = n[i], n2 = n[i], rscale = rscale_def,
                                         simple = TRUE)
    
    # confirm result with custom code
    #bf01[i] <- 1/bf10_t(t = 0, n1 = n[i], n2 = n[i], independentSamples = TRUE,
    #                    prior.location = 0, prior.scale = rscale_def, prior.df = 1)$BF10
    
    # BF for informed prior
    bf01_inf[i] <- 1/bf10_t(t = 0, ny = n[i], nx = n[i], independentSamples = TRUE,
                            prior.location = prior.location[j],
                            prior.scale = prior.scale[j],
                            prior.df = prior.df[j])$BF10
    
  }
  
  
  ### plot ###
  
  
  plot(log(bf01_inf)~n, type = "l", xlab = "Sample size (n)", ylab = "log BF01",
       bty = "n", las = 1, ylim = c(0, 10), col = "blue3", main = psych_names[j])#sprintf("psychologist %.0f", j))
  lines(log(bf01_bayesfactor)~n, type = "l", col = "red3")
}
dev.off()




















