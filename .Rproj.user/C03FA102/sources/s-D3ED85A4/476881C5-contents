rm(list = ls())
require("SuppDists")

psych_names = c("Social 1", "Social 2", "Neuro 1", "Neuro 2", "Develop 1", "Develop 2")
#

fH1 <- function(rho, sampleN, pearson_r){
dPearson(pearson_r, sampleN, rho=rho)*dbeta(rho,5.32,	18.58) ## this should change accordingly for each of the 6 psychologists (taking their prior into account)
}

fH1_Jeffreys <- function(rho, sampleN, pearson_r){
  dPearson(pearson_r, sampleN, rho=rho)*dbeta(rho, 1/2, 1/2)
}

set.seed(1)
# artificial correlation data set
data_frame_cor <- data.frame(cor = runif(2000, 0, 1),
                             N = as.integer(runif(2000, 20, 80))) # put 80 for re
 for(i in 1:2000){
   if(data_frame_cor$cor[i]<=.10){data_frame_cor$effect_size[i] <- "small"}
   else if(data_frame_cor$cor[i]>.10 & data_frame_cor$cor[i]<=.3){data_frame_cor$effect_size[i] <- "medium"}
   else if(data_frame_cor$cor[i]>.3 & data_frame_cor$cor[i]<=.5){data_frame_cor$effect_size[i] <- "large"}
   else{data_frame_cor$effect_size[i] <- "very large"}}
data_frame_cor$effect_size <- factor(data_frame_cor$effect_size)


#calculate informed BFs
for(i in 1:length(data_frame_cor$cor)){
H1 <- integrate(fH1, sampleN = data_frame_cor$N[i],
                pearson_r = data_frame_cor$cor[i], # make pearson_r = data_frame_cor$cor[i] for normal BF calculation
                lower = 0, upper = 1, subdivisions = 2000)

data_frame_cor$BF10_inf[i] <- H1$value/dPearson(data_frame_cor$cor[i], data_frame_cor$N[i], rho=0)
}

#calculate default BFs
for(i in 1:length(data_frame_cor$cor)){
  H1 <- integrate(fH1_Jeffreys, sampleN = data_frame_cor$N[i],
                  pearson_r =data_frame_cor$cor[i],# make pearson_r = data_frame_cor$cor[i] for normal BF calculation
                  lower = 0, upper = 1, subdivisions = 2000)

  data_frame_cor$BF10[i] <- H1$value/dPearson(data_frame_cor$cor[i], data_frame_cor$N[i], rho=0)
}


######################
#Compare the Cauchy-based BFs with informed-based BFs
#####################

#
pdf("psychologist1.pdf")
abline(0, 1)

bfplus0 <-  data_frame_cor$BF10# change the column appropriately given the participant you want to plot
bfplus0_inf <- data_frame_cor$BF10_inf# change the column appropriately given the participant you want to plot

bounds1 <- list(c(0.1, 3), c(3, 10), c(10, 30), c(30, 100), c(100, 1e5), c(1e5, 1e43))
bounds2 <- rev(bounds1)

op <- par(mfrow = c(6, 6), mar = c(0, 0, 0, 0), oma = c(6.5, 8.5, 2, 3))
require("RColorBrewer")
col_list <-  brewer.pal(5, "Set1")
panel <- 1

for (i in seq_along(bounds2)) {
  for (j in seq_along(bounds1)) {

    bfplus0_tmp <- bfplus0[bfplus0 > bounds2[[i]][1] & bfplus0 <= bounds2[[i]][2] &
                             bfplus0_inf > bounds1[[j]][1] & bfplus0_inf <= bounds1[[j]][2]]
    bfplus0_inf_tmp <- bfplus0_inf[bfplus0 > bounds2[[i]][1] & bfplus0 <= bounds2[[i]][2] &
                                     bfplus0_inf > bounds1[[j]][1] & bfplus0_inf <= bounds1[[j]][2]]

    es_tmp <- data_frame_cor$cor[bfplus0 > bounds2[[i]][1] & bfplus0 <= bounds2[[i]][2] &
                                bfplus0_inf > bounds1[[j]][1] & bfplus0_inf <= bounds1[[j]][2]]


    for(k in 1:length(es_tmp)){
      if(length(es_tmp)==0){
        pch = logical(0)
        col = logical(0)
      }else if(es_tmp[k] < 0.40 & es_tmp[k] > 0.20){
        col[k] <- col_list[2]
      }else if(es_tmp[k] < 0.60 & es_tmp[k] > 0.40){
        col[k] <- col_list[3]
      }else if(es_tmp[k] <1 & es_tmp[k] > 0.60){
        col[k] <- col_list[4]
      }else if(es_tmp[k] <= 0.2) {
        col <- logical(0)
      }
    }

    if (length(bfplus0_tmp) > 0) {

      plot(1, type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "",
           xlim = log(bounds1[[j]]), ylim = log(bounds2[[i]]), xaxs = "i",
           yaxs = "i")

      points(log(bfplus0_inf_tmp), log(bfplus0_tmp),
             pch = 16, bg = col, col = col, cex = 1.8, xpd = NA) # change pch and col

    } else {

      if (panel == 29) {
        plot(1, type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "",
             xlim = log(bounds1[[j]]), ylim = log(bounds2[[i]]), xaxs = "i",
             yaxs = "i", bty = "c")
      } else if (panel == 30) {
        plot(1, type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "",
             xlim = log(bounds1[[j]]), ylim = log(bounds2[[i]]), bty = "]")
      } else {
        plot(1, type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "",
             xlim = log(bounds1[[j]]), ylim = log(bounds2[[i]]), xaxs = "i",
             yaxs = "i")
      }

    }

    if (panel %in% (6*0:5+1))
      axis(2, at = log(bounds2[[i]]), las = 1, labels = bounds2[[i]], cex.axis = 2)

    if (panel %in% 31:36)
      axis(1, at = log(bounds1[[j]]), labels = bounds1[[j]], cex.axis = 2)

    if (i + j == 7)
      abline(0, 1, lwd = 2)

    panel <- panel + 1

  }
}

mtext(text = expression(BF["F"["+"]][0]), side = 1, outer = TRUE, cex = 1.5, line = 4)
mtext(text = expression(BF["+"][0]), side = 2, outer = TRUE, cex = 1.5,
      las = 1, line = 3.5)

legend(3, 2.85, c("0.2 < r < 0.4", "0.4 < r < 0.6",
                   "0.6 < r < 1"),
       bty = "n", pch = 15:18, pt.bg = col_list[2:5],
       col = col_list[2:5], pt.cex = rep(1.9, 4), cex = 2.2, xjust = .5, yjust = .5,
       y.intersp = 1.1, xpd = NA, adj = 0)
dev.off()






###############################
#evidence for H0 in correlations
###############################
require("SuppDists")

counter = 1
pdf("correlations_BFs_sample.pdf", 6.5,4.5)
par(mfrow = c(2,3), mar = c(5,4,2,1), lwd =2 , cex.lab = 1.3,cex.axis = 1.3)

for(j in list(c(0.62 , 22.44), c(5.32 , 18.58), c(5.35 , 15.69), c(10.70 , 22.98),
         c(3.83 , 8.76), c(8.65 , 12.39))){

fH1 <- function(rho, sampleN, pearson_r){
    dPearson(pearson_r, sampleN, rho=rho)*dbeta(rho,j[1],	j[2]) ## this should change accordingly for each of the 6 psychologists
}

set.seed(1)
data_frame_cor <- data.frame(cor = runif(2000, 0, 1),
                             N = as.integer(runif(2000, 20, 1000))) # put 80 for replication


#plot(data_frame_cor[,1]~data_frame_cor[,2])

####################calculate informed BFs
for(i in 1:length(data_frame_cor$cor)){
  H1 <- integrate(fH1, sampleN = data_frame_cor$N[i],
                  pearson_r = 0, # make pearson_r = data_frame_cor$cor[i] for normal BF calculation
                  lower = 0, upper = 1, subdivisions = 2000)

  data_frame_cor$BF10_inf[i] <- 1/H1$value
}

#calculate default BFs
for(i in 1:length(data_frame_cor$cor)){
  H1 <- integrate(fH1_Jeffreys, sampleN = data_frame_cor$N[i],
                  pearson_r =0,# make pearson_r = data_frame_cor$cor[i] for normal BF calculation
                  lower = 0, upper = 1, subdivisions = 2000)

  data_frame_cor$BF10[i] <- dPearson(0, data_frame_cor$N[i], rho=0)
}



df2 <-data_frame_cor[order(data_frame_cor$N),]
if(counter ==1){log_bf <- log(df2$BF10_inf); log_bf = - log_bf}else{log_bf <- log(df2$BF10_inf)}

plot(log_bf~df2$N, type = "l", xlab = "Sample size (n)", ylab = "log BF01",
     bty = "n", las = 1, ylim = c(0, 10), col = "blue3", main = psych_names[counter])#sprintf("psychologist %.0f", counter))



lines(log(df2$BF10)~df2$N, type = "l", col = "red3")
counter = counter +1
}
dev.off()
